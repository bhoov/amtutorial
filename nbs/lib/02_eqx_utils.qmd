# Equinox utils

Just a few utils that are nice for working with equinox models.

```{python}
#| default_exp eqx_utils
```

```{python}
#| export
#| hide
from typing import *
from dataclasses import dataclass
import equinox as eqx
import functools as ft
```

```{python}
#| export
@dataclass
class _AtWrapper:
    _tree_at: Callable
    def set(self, replace): return self._tree_at(replace=replace)
    def set_fn(self, replace_fn:Callable): return self._tree_at(replace_fn=replace_fn)

def _at(pytree, where, is_leaf=None) -> _AtWrapper:
    "JAX-like model surgery for eqx.Modules"
    return _AtWrapper(ft.partial(eqx.tree_at, where=where, pytree=pytree, is_leaf=is_leaf))
```

The `at` method can be monkey patched into an `eqx.Module`

```{python}
#|export
def monkey_patch():
    "Monkey patch the `at` method into an `eqx.Module`"
    eqx.Module.at = _at
```

For example,

```{python}
monkey_patch() # Adds .at to eqx.Module

class SimpleModule(eqx.Module):
    x: float
    y: float
    def __repr__(self): return f"SimpleModule(x={self.x}, y={self.y})"

m = SimpleModule(x=1., y=2.0)
print(m)
m2 = (m.at(lambda s: s.x).set(2) # Replace the x field with 2
    .at(lambda s: s.y).set_fn(lambda y: y+1) # Replace the y field with y+1
)
print(m2)
```
